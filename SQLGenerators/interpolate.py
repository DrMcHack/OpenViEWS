import os
def read_varlist(path_varlist, excludevars = ["gwno", "year"]):

    with open(path_varlist, 'r') as f:
        varlist = f.readlines()
    varlist = [line.lower().strip() for line in varlist]
    varlist = [line for line in varlist if not line[0]=="#"]
    varlist = [line for line in varlist if line not in excludevars]

    dictlist = []
    for line in varlist:
        d = {}
        if "," in line:
            d['name_masterdata'] = line.split(",")[0].strip()
            d['name_db'] = line.split(",")[1].strip()
        else:
            d['name_masterdata'] = line
            d['name_db'] = line

        d['name_li'] = d['name_db'] + "_li"
        dictlist.append(d.copy())
    return dictlist

def make_header( path_varlist, 
                 path_queries, 
                 schema_to, 
                 table_to, 
                 schema_ipolate, 
                 table_ipolate, 
                 timevar, 
                 groupvar, 
                 t_start, 
                 t_end):



    path_this_script = os.path.realpath(__file__)

    header = "--  This file was generated by: \n"
    header += "-- " + path_this_script + "\n"
    header += "-- The parameters are: \n"

    header += ("--   path_varlist: " + path_varlist + "\n")
    header += ("--   path_queries: " + path_queries + "\n")
    header += ("--   schema_to: " + schema_to + "\n")
    header += ("--   table_to: " + table_to + "\n")
    header += ("--   schema_ipolate: " + schema_ipolate + "\n")
    header += ("--   table_ipolate: " + table_ipolate + "\n")
    header += ("--   timevar: " + timevar + "\n")
    header += ("--   groupvar: " + groupvar + "\n")
    header += ("--   t_start: " + t_start + "\n")
    header += ("--   t_end: " + t_end + "\n")

    return header

def make_create_table_ipolate(varlist, schema, table, groupvar, timevar):
    st = schema + "." + table
    query = "-- make_create_table_ipolate()"
    query += "\n"

    query += "DROP TABLE IF EXISTS " + st + ";\n"
    query += "CREATE TABLE " + st + "\n"
    query += "AS SELECT \n"
    query += "  " + groupvar + " as gid, \n"
    query += "  " + timevar  + " as year, \n"

    for var in varlist:
        query += "  " + var['name_db'] + ",\n"
    query = query.strip(",\n")
    query += "\nFROM staging.country_year;"
    query += "\n"
    query += "\nCREATE INDEX ipol_idx ON " + st + "(gid, year);"

    query += "\n"
    return query

def make_queries_drops(varlist, schema, table):
    st = schema + "." + table
    query = "-- make_queries_drops()"
    query += "\n"
    for var in varlist:
        query += "ALTER TABLE " + st + " DROP COLUMN IF EXISTS " 
        query += var['name_db'] + ";\n"

    query += "\n"
    return query

def make_ipolate_update(varlist, schema, table, t_start, t_end):
    st = schema + "." + table
    query = "-- make_ipolate_update()"
    query += "\n"
    query += "UPDATE " + st + " SET" + "\n"

    for var in varlist:
        query += "  " + var['name_li'] + " = public.interpolate_priogrid_year('"
        query += schema + "','" + table + "','" + var['name_db'] 
        query += "',gid, year),\n"
    query = query.strip(",\n")
    query += "\n"
    query += "WHERE year between "
    query += str(t_start) + " AND " + str(t_end) + ";"
    
    query += "\n"
    return query

def make_replace_staging_li(varlist, schema="staging", table="country_year"):
    st = schema + "." + table
    query = "-- make_replace_staging_li()"
    query += "\n"
    for var in varlist:
        query += "ALTER TABLE " + st + " DROP COLUMN IF EXISTS " + var['name_li']
        query += ";\n"
    for var in varlist:
        query += "ALTER TABLE " + st + " ADD COLUMN " + var['name_li'] 
        query += " FLOAT" + ";\n"

    return query

def make_update_staging_li( varlist, 
                            schema_to, 
                            table_to,
                            schema_from, 
                            table_from):
    
    st_to = schema_to + "." + table_to
    st_from = schema_from + "." + table_from

    query = "-- make_update_staging_li()"
    query += "\n"
    query += "UPDATE " + st_to + " SET\n"
    for var in varlist:
        query += "  " + var['name_li'] + "\t= c."+var['name_li']+",\n"
    query = query.strip(",\n")
    query += "\n"
    query += "FROM " + st_from + " AS c\n"
    query += "WHERE c.gid = country_id AND c.year=year_id;"
    return query

def make_add_column_li(varlist, schema, table):
    st = schema + "." + table
    query = "-- make_add_column_li()"
    query += "\n"
    for var in varlist:
        query += "ALTER TABLE " + st + " ADD COLUMN " + var['name_li']
        query += " FLOAT;\n"

    query += "\n"
    return query

def write_queries(path_varlist, 
                 path_queries, 
                 schema_to, 
                 table_to, 
                 schema_ipolate, 
                 table_ipolate, 
                 timevar, 
                 groupvar, 
                 t_start, 
                 t_end):
    varlist = read_varlist(path_varlist)

    header = make_header(path_varlist, 
                 path_queries, 
                 schema_to, 
                 table_to, 
                 schema_ipolate, 
                 table_ipolate, 
                 timevar, 
                 groupvar, 
                 t_start, 
                 t_end)
    create_table_ipolate = make_create_table_ipolate(varlist, schema_ipolate, 
                                                    table_ipolate, groupvar, 
                                                    timevar)
    populate_cy_interp = make_add_column_li(varlist, schema_ipolate, 
                                                    table_ipolate)
    ipolate_update = make_ipolate_update(varlist, schema_ipolate, 
                                                    table_ipolate, 
                                                    t_start, t_end)
    replace_staging_li = make_replace_staging_li(varlist)
    update_staging_li = make_update_staging_li(varlist, schema_to,
                                                        table_to,
                                                        schema_ipolate,
                                                        table_ipolate)

    with open(path_queries, 'w') as f:
        f.write(header + "\n")
        f.write(create_table_ipolate + "\n")
        f.write(populate_cy_interp + "\n")
        f.write(ipolate_update + "\n")
        f.write(replace_staging_li + "\n")
        f.write(update_staging_li + "\n")
    
def main():

    path_varlist = "varlist_masterdata.txt"
    path_queries = "interpolate_fvp.sql"
    schema_to = "staging"
    table_to = "country_year"
    schema_ipolate = "dataprep"
    table_ipolate = "interpolate_fvp"
    timevar = "year_id"
    groupvar = "country_id"
    t_start = "1980"
    t_end = "2100"

    write_queries(path_varlist, 
                 path_queries, 
                 schema_to, 
                 table_to, 
                 schema_ipolate, 
                 table_ipolate, 
                 timevar, 
                 groupvar, 
                 t_start, 
                 t_end)

    path_varlist = "vars_ipolate_pgy.txt"
    path_queries = "interpolate_pgy.sql"
    schema_to = "staging"
    table_to = "priogrid_year"
    schema_ipolate = "dataprep"
    table_ipolate = "interpolate_pgy"
    timevar = "year_id"
    groupvar = "priogrid_gid"
    t_start = "1980"
    t_end = "2100"

    write_queries(path_varlist, 
                 path_queries, 
                 schema_to, 
                 table_to, 
                 schema_ipolate, 
                 table_ipolate, 
                 timevar, 
                 groupvar, 
                 t_start, 
                 t_end)

main()




